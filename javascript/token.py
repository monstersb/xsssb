class TokenType:
    addition = 'Addition'
    addition_assignment = 'Addition Assignment'
    ask = 'Ask'
    assignment = 'Assignment'
    colon = 'Colon'
    comma = 'Comma'
    bitwise_and = 'Bitwize AND'
    bitwise_and_assignment = 'Bitwize AND Assignment'
    bitwise_or = 'Bitwize OR'
    bitwise_or_assignment = 'Bitwize OR Assignment'
    bitwise_not = 'Bitwize NOT'
    bitwise_not_assignment = 'Bitwize NOT Assignment'
    bitwise_xor = 'Bitwize XOR'
    bitwise_xor_assignment = 'Bitwize XOR Assignment'
    decrement = 'Decrement'
    division = 'Division'
    division_assignment = 'Assignment Division'
    dot = 'Dot'
    equal = 'Equal'
    exponentiation = 'Exponentiation'
    exponentiation_assignment = 'Exponentiation Assignment'
    greater_than = 'Greater Than'
    greater_than_or_equal = 'Greater Than Or Equal'
    increment = 'Increment'
    invalid = 'Invalid'
    identifier = 'Identifier'
    keyword_await = 'Await'
    keyword_abstract = 'Abstract'
    keyword_break = 'Break'
    keyword_boolean = 'Boolean'
    keyword_byte = 'Byte'
    keyword_case = 'Case'
    keyword_catch = 'Catch'
    keyword_char = 'Char'
    keyword_class = 'Class'
    keyword_const = 'Const'
    keyword_continue = 'Continue'
    keyword_debugger = 'Debugger'
    keyword_default = 'Default'
    keyword_delete = 'Delete'
    keyword_do = 'Do'
    keyword_double = 'Double'
    keyword_else = 'Else'
    keyword_enum = 'Enum'
    keyword_export = 'Export'
    keyword_extends = 'Extends'
    keyword_final = 'Final'
    keyword_finally = 'Finally'
    keyword_float = 'Float'
    keyword_for = 'For'
    keyword_function = 'Function'
    keyword_goto = 'Goto'
    keyword_if = 'If'
    keyword_import = 'Import'
    keyword_implements = 'Implements'
    keyword_in = 'In'
    keyword_instanceof = 'Instanceof'
    keyword_int = 'Int'
    keyword_interface = 'Interface'
    keyword_let = 'Let'
    keyword_long = 'Long'
    keyword_native = 'Native'
    keyword_new = 'New'
    keyword_null = 'Null'
    keyword_of = 'Of'
    keyword_package = 'Package'
    keyword_private = 'Private'
    keyword_protected = 'Protected'
    keyword_public = 'Public'
    keyword_return = 'Return'
    keyword_short = 'Short'
    keyword_static = 'Static'
    keyword_super = 'Super'
    keyword_switch = 'Switch'
    keyword_synchronized = 'Synchronized'
    keyword_this = 'This'
    keyword_throw = 'Throw'
    keyword_throws = 'Throws'
    keyword_transient = 'Transient'
    keyword_try = 'Try'
    keyword_typeof = 'Typeof'
    keyword_var = 'Var'
    keyword_void = 'Void'
    keyword_volatile = 'Volatile'
    keyword_while = 'While'
    keyword_with = 'With'
    keyword_yield = 'Yield'
    left_brace = 'Left Brace'
    left_bracket = 'Left Bracket'
    left_parenthesis = 'Left Parenthesis'
    left_shift = 'Left Shift'
    left_shift_assignment = 'Left Shift Assignment'
    less_than = 'Less Than'
    less_than_or_equal = 'Less Than Or Equal'
    line_separator = 'Line Terminator'
    logical_and = 'Logical AND'
    logical_or = 'Logical OR'
    logical_not = 'Logical NOT'
    multi_line_comment = 'Multi Line Comment'
    multiplication = 'Multiplication'
    multiplication_assignment = 'Multiplication Assignment'
    not_equal = 'Not Equal'
    number = 'Number'
    remainder = 'Remainder'
    remainder_assignment = 'Remainder Assignment'
    right_shift = 'Right Shift'
    regexp = 'Reg Expression'
    right_shift_assignment = 'Right Shift Assignment'
    right_brace = 'Right Brace'
    right_bracket = 'Right Bracket'
    right_parenthesis = 'Right Parenthesis'
    semicolon = 'Semicolon'
    single_line_comment = 'Single Line Comment'
    space = 'Space'
    strict_equal = 'Strict Equal'
    strict_not_equal = 'Strict Not Equal'
    string = 'String'
    subtraction = 'Subtraction'
    subtraction_assignment = 'Subtraction Assignment'
    terminator = 'Terminator'
    unsigned_right_shift_assignment = 'Unsigned Right Shift Assignment'
    unsigned_right_shift = 'Unsigned Right Shift'

class Token(object):
    def __init__(self, type, value):
        self.type = type
        self.value = value

    def __str__(self):
        return '[{0}] [{1}]'.format(self.type, self.value)

class Token(object):
    def __init__(self, type, value):
        self.type = type
        self.value = value

    def __str__(self):
        return '[ {0:20s} ]       {1}'.format(self.type, repr(self.value))
